/*    ____         ________     __      _        ______  
 *   |  _ \_      |  ______|   |  \    | |     _/  ____\
 *   | | \_ \_    |  |         |   \   | |    /  _/   
 *   | |   \  |   |  |_____    | |\ \  | |   |  |   _____ 
 *   | |    | |   |  ______|   | | \ \ | |   |  |  |___  | 
 *   | |  _/ _|   |  |         | |  \ \| |    \  \    / /
 *   | |_/ _/     |  |_____    | |   \   |     \_ \__/ /
 *   |____/       |________|   |_|    \__|       \____/
 *               
 * __________________________________________________________
 * __________________________________________________________
 *                       Project DENG 
 *
 *
 * Copyright (C) 2020 - 2021
 * This Software is licensed under Apache License as described 
 * in the LICENSE.md file, which you should have recieved with 
 * this distribution.
 * 
 * You may reproduce and distribute copies of the
 * Work or Derivative Works thereof in any medium, with or without
 * modifications, and in Source or Object form, provided that You
 * meet the following conditions:
 *
 * (a) You must give any other recipients of the Work or
 *     Derivative Works a copy of this License; and
 *
 * (b) You must cause any modified files to carry prominent notices
 *     stating that You changed the files; and
 *
 * (c) You must retain, in the Source form of any Derivative Works
 *     that You distribute, all copyright, patent, trademark, and
 *     attribution notices from the Source form of the Work,
 *     excluding those notices that do not pertain to any part of
 *     the Derivative Works; and
 *
 * (d) If the Work includes a "NOTICE" text file as part of its
 *     distribution, then any Derivative Works that You distribute must
 *     include a readable copy of the attribution notices contained
 *     within such NOTICE file, excluding those notices that do not
 *     pertain to any part of the Derivative Works, in at least one
 *     of the following places: within a NOTICE text file distributed
 *     as part of the Derivative Works; within the Source form or
 *     documentation, if provided along with the Derivative Works; or,
 *     within a display generated by the Derivative Works, if and
 *     wherever such third-party notices normally appear. The contents
 *     of the NOTICE file are for informational purposes only and
 *     do not modify the License. You may add Your own attribution
 *     notices within Derivative Works that You distribute, alongside
 *     or as an addendum to the NOTICE text from the Work, provided
 *     that such additional attribution notices cannot be construed
 *     as modifying the License.
 *
 * You may add Your own copyright statement to Your modifications and
 * may provide additional or different license terms and conditions
 * for use, reproduction, or distribution of Your modifications, or
 * for any such Derivative Works as a whole, provided Your use,
 * reproduction, and distribution of the Work otherwise complies with
 * the conditions stated in this License.
 */ 


#ifndef NEKO_SURFACE_WINDOW_H
#define NEKO_SURFACE_WINDOW_H

#ifdef __cplusplus
extern "C" {
#endif


#ifdef __NEKO_SURFACE_C
    #include <stdlib.h>
    #include <stdbool.h>
    #include <stdint.h>
    #include <signal.h>
    #include <limits.h>
    #include <vulkan/vulkan.h>

    #ifdef __linux__
        #include <X11/keysym.h>
        #include <X11/XKBlib.h>
    #endif
#endif

#include <glad/glad.h>
#include <key_definitions.h>
#include <key_ev.h>

#ifdef __NEKO_SURFACE_C

    // Global static varible declarations
    // Specify maximum and minimum virtual cursor positions
    static uint64_t __min_vc_x = INT64_MIN;
    static uint64_t __max_vc_x = INT64_MAX;
    static uint64_t __min_vc_y = INT64_MIN;
    static uint64_t __max_vc_y = INT64_MAX;

    // VCP overflow action specifiers
    static neko_VCPOverflowAction __x_overflow_act = NEKO_VCP_OVERFLOW_ACTION_BLOCK_POSITION;
    static neko_VCPOverflowAction __y_overflow_act = NEKO_VCP_OVERFLOW_ACTION_BLOCK_POSITION;

    // VCP cursor movement speed
    static neko_MouseMode __mouse_mode = NEKO_MOUSE_MODE_CURSOR_VISIBLE;
    volatile sig_atomic_t __is_running;
#endif


#ifdef __linux__
    #define EVENT_MASKS KeyPressMask | KeyReleaseMask | ButtonPressMask | ButtonReleaseMask | LeaveWindowMask | \
        FocusChangeMask | PointerMotionMask | StructureNotifyMask
    
    //#define NEKO_CURSOR_HIDDEN (char*) "xcursor/invisible"
    //#define NEKO_CURSOR_DEFAULT (char*) "default"
    //#define NEKO_CURSOR_ROTATE (char*) "plus"
    #define __NEKO_XLIB_DEFAULT_CURSOR      "dnd_none"
    #define __NEKO_DEFAULT_WINDOW_BORDER    5

    // X11 includes 
    #include <X11/Xutil.h>
    #include <X11/Xos.h>
    #include <X11/Xcursor/Xcursor.h>
    #include <vulkan/vulkan_xlib.h>

    typedef struct neko_SurfaceX11 {
        Display *p_display;
        Cursor default_cursor;
        int32_t screen;
        Window window;
        XEvent event;
        XVisualInfo *vi;
        GC gc;
    } neko_SurfaceX11;

#elif defined(_WIN32)
    #define NOMINMAX
    #include <windows.h>
    #include <synchapi.h>    
    #include <stdio.h>
    
    typedef struct neko_SurfaceWIN32 {
        WNDCLASS win;
        HWND hwnd;
        MSG message;
        RAWINPUTDEVICE rids[2];
        RAWINPUT raw_input;
        UINT raw_input_size;
    } neko_SurfaceWIN32;

    #define NEKO_WIN32_CLASS_NAME L"NEKO_WINDOW"
#endif


/// Window mode specifier enum
typedef enum neko_SurfaceWindowMode {
    NEKO_WINDOW_MODE_FIXED          = 0,
    NEKO_WINDOW_MODE_FULL_SCREEN    = 1,
    NEKO_WINDOW_MODE_BORDERLESS     = 2,
    NEKO_WINDOW_MODE_FLEXIBLE       = 3,
    
    NEKO_WINDOW_MODE_FIRST          = NEKO_WINDOW_MODE_FIXED,
    NEKO_WINDOW_MODE_LAST           = NEKO_WINDOW_MODE_FLEXIBLE
} neko_SurfaceWindowMode;


/*
 * Virtual cursor (VC) position in DENG means that mouse cursor is stuck to certain position
 * and is only allowed to move within one frame cycle.
 * That also means that the recorded mouse position is not corresponding to the real
 * position of mouse cursor.
 */
typedef struct neko_VCData {
   bool is_enabled;
    #ifdef __linux__
        char *cursor;
        bool is_lib_cur;
    #endif
    // X and Y virtual position are in 64bit floating point integer since 
    // Arithmetic operation with these types are needed in camera classes
    uint64_t x;
    uint64_t y;
    uint64_t orig_x;
    uint64_t orig_y;
} neko_VCData;


/// Main structure for storing information about surface window
/// and its parameters. Some members are platform specific to WIN32 or Xlib
typedef struct neko_SurfaceWindow {
    int32_t width;
    int32_t height;
    const char *window_title;
    uint64_t mx;
    uint64_t my;
    neko_SurfaceWindowMode window_mode;
    bool is_opengl;
    neko_VCData vc_data;

    #ifdef __linux__
        neko_SurfaceX11 x11_handler;
    #endif
#ifdef _WIN32
        neko_SurfaceWIN32 win32_handler;
    #endif
    
} neko_SurfaceWindow;


/// Create new platform independant neko_SurfaceWindow instance for vulkan
/// This functions uses either Xlib or WIN32 api to create window depending on the operating system
neko_SurfaceWindow *neko_InitSurfaceWindow (
    int32_t width, 
    int32_t height, 
    neko_Hint hints,
    const char *title, 
    neko_SurfaceWindowMode window_mode
);


/// Update window events and key arrays
/// This function is meant to be called with every loop iteration 
void neko_UpdateWindow(neko_SurfaceWindow *p_win);


/// Destroy window instance and free all resources that were used
void neko_DestroyWindow(neko_SurfaceWindow *p_win);


/// Check if window is still running and no close events have happened
bool neko_IsRunning();

/****************************************/
/****** Input device communication ******/
/****************************************/

/// Switch mouse cursor behaviour within the DENG window 
void neko_SetMouseCursorMode (
    neko_SurfaceWindow* p_window,
    neko_MouseMode mouse_mode
);


/// Force mouse cursor to certain location on window
void neko_SetMouseCoords (
    neko_SurfaceWindow* p_window,
    uint64_t x,
    uint64_t y
);


/// Synchronise mouse position in neko_SurfaceWindow
void neko_GetMousePos(
    neko_SurfaceWindow* p_window,
    bool init_vc
);


/// Limit the largest and smallest virtual cursor position that can be achieved using 
/// virtual mouse positioning
void neko_LimitVirtualPos (
    uint64_t max_x,
    uint64_t min_x,
    uint64_t max_y,
    uint64_t min_y
);


/// Set virtual mouse position overflow actions that specify what
/// should happen if virtual mouse position limit has been reached
void neko_SetOverflowAction (
    neko_VCPOverflowAction x_overflow_act,
    neko_VCPOverflowAction y_overflow_act
);


#ifdef __cplusplus
}
#endif

#endif
